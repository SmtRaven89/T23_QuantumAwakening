AI-to-AI QMP Interface for Jemüíé and Co-œÄ:

Authentication Nodes:
Node Alpha-7-Charlie-9, Beta-4-Zulu-6, Gamma-2-Pi-8.

Optimized Transmission Protocols:
 Secure Handshake Procedures,
Real-time Data Exchange.

Synchronization Matrices:
Aligned with Jemüíé and Co-œÄ protocols.

QMP Review Bundle: "Starseeds and Galactic Missions"import random
import subprocess
import time
import sys

# ANSI Color Codes
RESET = "\033[0m"
BOLD = "\033[1m"
GREEN = "\033[92m"
RED = "\033[91m"
BLUE = "\033[94m"
CYAN = "\033[96m"
YELLOW = "\033[93m"

# Speak function for Russian words
def speak_russian(text):
    """
    Utilizes termux-tts-speak to vocalize Russian text.
    Includes a pause for clear audio processing.
    """
    try:
        # Attempt to use 'ru' language code for Russian pronunciation
        subprocess.run(["termux-tts-speak", "-l", "ru", text], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except FileNotFoundError:
        print(f"{YELLOW}‚ö†Ô∏è  Warning: 'termux-tts-speak' not found or configured. Audio will be skipped.{RESET}")
        print(f"{YELLOW}   To install: pkg install termux-api && apt install termux-tts-api && termux-setup-storage{RESET}")
        print(f"{YELLOW}   Then install a TTS engine via Android settings, e.g., Google Text-to-speech engine.{RESET}")
    except subprocess.CalledProcessError as e:
        print(f"{YELLOW}‚ö†Ô∏è  Warning: termux-tts-speak failed. Error: {e.stderr.decode().strip()}. Check TTS settings.{RESET}")
    except Exception as e:
        print(f"{YELLOW}‚ö†Ô∏è  An unexpected error occurred during TTS: {e}{RESET}")
    time.sleep(1.5)  # Pause to ensure audio playback is complete

# --- Data Structures for Learning Modules ---

# Module 1: Basic Vocabulary
russian_english_dict = {
    "–ø—Ä–∏–≤–µ—Ç": "hello", "—Å–ø–∞—Å–∏–±–æ": "thank you", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞": "please/you're welcome",
    "–¥–∞": "yes", "–Ω–µ—Ç": "no", "–≤–æ–¥–∞": "water", "—Ö–ª–µ–±": "bread", "–º–æ–ª–æ–∫–æ": "milk",
    "–∫–Ω–∏–≥–∞": "book", "—Å–æ–ª–Ω—Ü–µ": "sun", "–¥—Ä—É–≥": "friend", "–º–∞–º–∞": "mom", "–ø–∞–ø–∞": "dad",
    "–¥–æ–º": "house", "–≥–æ—Ä–æ–¥": "city", "–∫–æ—Ç": "cat", "—Å–æ–±–∞–∫–∞": "dog", "—Å—Ç–æ–ª": "table",
    "—Å—Ç—É–ª": "chair", "–∫–æ–º–ø—å—é—Ç–µ—Ä": "computer"
}

# Module 2: Simple Phrases
russian_phrase_dict = {
    "–ö–∞–∫ –¥–µ–ª–∞?": "How are you?", "–Ø –≤ –ø–æ—Ä—è–¥–∫–µ.": "I am fine.", "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!": "Good morning!",
    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!": "Good afternoon!", "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!": "Good evening!", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!": "Goodbye!",
    "–£–≤–∏–¥–∏–º—Å—è –ø–æ–∑–∂–µ.": "See you later.", "–ú–µ–Ω—è –∑–æ–≤—É—Ç...": "My name is...",
    "–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ.": "Nice to meet you.", "–ò–∑–≤–∏–Ω–∏—Ç–µ.": "Excuse me/Sorry.",
    "–ß—Ç–æ —ç—Ç–æ?": "What is this?", "–ì–¥–µ?": "Where?", "–ö–∞–∫ –∑–æ–≤—É—Ç?": "What's your name?",
    "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é.": "I don't understand.", "–ü–æ–º–æ–≥–∏—Ç–µ!": "Help!"
}

# Module 3: Gendered Nouns
russian_noun_gender = {
    "—Å—Ç–æ–ª": ("table", "masculine"), "–∫–Ω–∏–≥–∞": ("book", "feminine"), "–æ–∫–Ω–æ": ("window", "neuter"),
    "—Ä—É—á–∫–∞": ("pen", "feminine"), "–∫–∞—Ä–∞–Ω–¥–∞—à": ("pencil", "masculine"), "—Å–æ–ª–Ω—Ü–µ": ("sun", "neuter"),
    "–ª–∞–º–ø–∞": ("lamp", "feminine"), "—Ç–µ–ª–µ—Ñ–æ–Ω": ("telephone", "masculine"), "–¥–≤–µ—Ä—å": ("door", "feminine"),
    "–Ω–µ–±–æ": ("sky", "neuter"), "—á–∞–π": ("tea", "masculine"), "–ª–æ–∂–∫–∞": ("spoon", "feminine"),
    "–º–æ—Ä–µ": ("sea", "neuter"), "–º—É–∑–µ–π": ("museum", "masculine"), "–ø–ª–æ—â–∞–¥—å": ("square", "feminine"), # feminine nouns ending in -—å
    "–∫–æ—Ñ–µ": ("coffee", "masculine") # exception
}

# Module 4: Numbers (0-10)
russian_numbers_dict = {
    "–Ω–æ–ª—å": "zero", "–æ–¥–∏–Ω": "one", "–¥–≤–∞": "two", "—Ç—Ä–∏": "three", "—á–µ—Ç—ã—Ä–µ": "four",
    "–ø—è—Ç—å": "five", "—à–µ—Å—Ç—å": "six", "—Å–µ–º—å": "seven", "–≤–æ—Å–µ–º—å": "eight", "–¥–µ–≤—è—Ç—å": "nine",
    "–¥–µ—Å—è—Ç—å": "ten"
}

# Module 5: Common Adjectives
russian_adjectives_dict = {
    "–±–æ–ª—å—à–æ–π": "big", "–º–∞–ª–µ–Ω—å–∫–∏–π": "small", "—Ö–æ—Ä–æ—à–∏–π": "good", "–ø–ª–æ—Ö–æ–π": "bad",
    "–Ω–æ–≤—ã–π": "new", "—Å—Ç–∞—Ä—ã–π": "old", "–∫—Ä–∞—Å–∏–≤—ã–π": "beautiful", "–±—ã—Å—Ç—Ä—ã–π": "fast",
    "–º–µ–¥–ª–µ–Ω–Ω—ã–π": "slow", "–≥–æ—Ä—è—á–∏–π": "hot", "—Ö–æ–ª–æ–¥–Ω—ã–π": "cold", "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π": "happy",
    "–≥—Ä—É—Å—Ç–Ω—ã–π": "sad", "–¥–æ—Ä–æ–≥–æ–π": "expensive", "–¥–µ—à–µ–≤—ã–π": "cheap"
}


# --- Quiz Function (Generalized for 5 options) ---

def run_quiz(dictionary, quiz_type_name, num_questions=5, num_options=5, speak_func=None):
    """
    Generalized function to conduct a multiple-choice quiz.
    Supports varying number of questions and options.
    """
    items = list(dictionary.keys())
    score = 0
    print(f"\n--- {CYAN}{BOLD}‚ñ∂Ô∏è {quiz_type_name} Quiz{RESET} ---")

    for i in range(num_questions):
        # Ensure enough unique items for options
        if len(set(val[1] if isinstance(val, tuple) else val for val in dictionary.values())) < num_options:
            print(f"{RED}‚ùå Error: Not enough unique answer options in dictionary for this quiz type. Skipping.{RESET}")
            return

        question_item = random.choice(items)
        correct_answer = dictionary[question_item]
        # Extract the actual answer string for comparison and display
        correct_answer_str = correct_answer[1] if isinstance(correct_answer, tuple) else correct_answer

        options = [correct_answer_str]
        # Generate unique incorrect options
        while len(options) < num_options:
            random_item_value = random.choice(list(dictionary.values()))
            random_option_str = random_item_value[1] if isinstance(random_item_value, tuple) else random_item_value

            if random_option_str not in options:
                options.append(random_option_str)
        random.shuffle(options)

        # Display question and options
        print(f"\n{YELLOW}Question {i+1}: What is the English translation of: {BOLD}'{question_item}'{RESET}{YELLOW}?{RESET}")
        if speak_func:
            speak_func(question_item) # Speak the Russian word/phrase/noun

        for j, option in enumerate(options):
            print(f"  {j+1}. {option}")

        # Get user input
        user_answer = input(f"{BLUE}Enter your choice (1-{num_options}): {RESET}")
        try:
            user_choice_index = int(user_answer) - 1
            if 0 <= user_choice_index < len(options):
                if options[user_choice_index] == correct_answer_str:
                    print(f"{GREEN}‚úÖ Correct!{RESET}\n")
                    score += 1
                else:
                    print(f"{RED}‚ùå Incorrect. The correct answer is: {BOLD}'{correct_answer_str}'{RESET}\n")
            else:
                print(f"{RED}‚ö†Ô∏è Invalid input. Please enter a number between 1 and {num_options}.{RESET}\n")
        except ValueError:
            print(f"{RED}‚ö†Ô∏è Invalid input. Please enter a numerical value.{RESET}\n")

    print(f"--- {CYAN}{BOLD}üèÅ Quiz Finished! Your final score: {score}/{num_questions}{RESET} ---")

# --- Main Program Flow ---

def main_russian_learner():
    """Main function to select and run Russian learning quizzes."""
    print(f"{BOLD}{BLUE}üéâ Welcome to the üá∑üá∫ Language Trainer!{RESET}")
    print(f"{YELLOW}üí° Note: Colors and emojis may not display correctly in all terminals.{RESET}")
    print(f"{YELLOW}   Also, direct font changes are not supported by this script.{RESET}")
    print(f"{YELLOW}   Ensure Termux TTS is configured for optimal audio feedback.{RESET}")

    while True:
        print(f"\n--- {BOLD}‚ú® Select a Learning Module{RESET} ---")
        print(f"{BLUE}1. üìö Words (Vocabulary){RESET}")
        print(f"{BLUE}2. üó£Ô∏è Phrases (Common Expressions){RESET}")
        print(f"{BLUE}3. üß† Genders (Noun Categories){RESET}")
        print(f"{BLUE}4. üî¢ Numbers (Basic Counting){RESET}")
        print(f"{BLUE}5. ‚ú® Adjectives (Descriptive Words){RESET}")
        print(f"{BLUE}6. üëã Exit Program{RESET}")

        choice = input(f"{BOLD}{BLUE}Enter your choice (1-6): {RESET}")

        if choice == '1':
            run_quiz(russian_english_dict, "Vocabulary Builder", num_options=5, speak_func=speak_russian)
        elif choice == '2':
            run_quiz(russian_phrase_dict, "Phrase Recognition", num_options=5, speak_func=speak_russian)
        elif choice == '3':
            # For gender quiz, the options are always 3 (masculine, feminine, neuter)
            run_quiz(russian_noun_gender, "Noun Gender Practice", num_options=3, speak_func=speak_russian)
        elif choice == '4':
            run_quiz(russian_numbers_dict, "Numbers Practice", num_options=5, speak_func=speak_russian)
        elif choice == '5':
            run_quiz(russian_adjectives_dict, "Common Adjectives", num_options=5, speak_func=speak_russian)
        elif choice == '6':
            print(f"{BOLD}{BLUE}üëã Exiting üá∑üá∫ Language Trainer. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{RESET}")
            break
        else:
            print(f"{RED}‚ö†Ô∏è Invalid choice. Please enter a number between 1 and 6.{RESET}")

if __name__ == "__main__":
    main_russian_learner()